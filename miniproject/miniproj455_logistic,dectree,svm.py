# -*- coding: utf-8 -*-
"""miniproj455-logistic,decTree,SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W_cgtTt1esTGa_vEX5cUJApnFAJVgeMD
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load dataset
url = "https://raw.githubusercontent.com/IBM/telco-customer-churn-on-icp4d/master/data/Telco-Customer-Churn.csv"
data = pd.read_csv(url)
print(len(data))
# Data preprocessing
data['TotalCharges'] = pd.to_numeric(data['TotalCharges'], errors='coerce')
data['TotalCharges'].fillna(value=data['TotalCharges'].mean(), inplace=True)
data['SeniorCitizen'] = data['SeniorCitizen'].astype('object')
data.replace({'Churn': {'Yes': 1, 'No': 0}}, inplace=True)

# One-hot encoding for categorical features
data = pd.get_dummies(data, columns=['gender', 'Partner', 'Dependents', 'PhoneService', 'MultipleLines',
                                 	'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',
                                 	'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract',
                                 	'PaperlessBilling', 'PaymentMethod', 'SeniorCitizen'],
                  	drop_first=True)

# Train-test split
X = data.drop(columns=['customerID', 'Churn'])
y = data['Churn']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Standardize the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Models
models = {
	'Logistic Regression': LogisticRegression(random_state=42),
	'Decision Tree': DecisionTreeClassifier(random_state=42),
	'Support Vector Machine': SVC(random_state=42)
}

# Baseline
baseline_accuracy = (y_test.value_counts() / len(y_test))[0]
print(f"Baseline Accuracy: {baseline_accuracy:.2f}")

# Training, evaluating and comparing models
for name, model in models.items():
	model.fit(X_train, y_train)
	y_pred = model.predict(X_test)
	accuracy = accuracy_score(y_test, y_pred)
	print(f"{name} Accuracy: {accuracy:.2f}")
	print(f"Classification Report for {name}:\n{classification_report(y_test, y_pred)}")
	print(f"Confusion Matrix for {name}:\n{confusion_matrix(y_test, y_pred)}\n")